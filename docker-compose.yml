services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - "9042:9042"
    volumes:
      - cassandra_data:/var/lib/cassandra

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"

  analytics-consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    container_name: analytics-consumer
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092
    restart: unless-stopped
  app:
    build: .
    container_name: app
    depends_on:
      - kafka
      - cassandra
      - redis
    environment:
      KAFKA_BROKER: kafka:9092
      CASSANDRA_HOST: cassandra
      REDIS_HOST: redis
    ports:
      - "3000:3000"
    restart: unless-stopped
    # THIS IS THE NEW PART: We override the start command
    command: >
      sh -c "
        echo 'Waiting for services to start...' &&
        sleep 60 &&
        echo 'Starting the application!' &&
        npm start
      "

volumes:
  cassandra_data: